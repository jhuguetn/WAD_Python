.. .. documentation master file, created by
   sphinx-quickstart on Mon Jun 22 21:29:02 2015.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to pyWAD's documentation!
==============================

The pywad package consists of tools, plugins that can be used to analyze
qc images generated by medical imaging modalities.

The figure below shows how the pywad package fits into
the overall WAD QC framework.

.. image:: overview.jpeg
   :scale: 50 %


Getting Started
---------------

.. include:: ../GettingStarted.txt


Configuration files
-------------------

A plugin is a piece of code that performs a specific action on a data class object. To use a specific plugin to analyse a given data object a configuration file has to be specified and uploaded in the WAD QC software. 
A configuration file defines one or multiple actions to be executed. Each action is defined by specifying a plugin and the function to be executed from that plugin. Also a default_level page on which the results of the analysis will be published has to be specified. The simplest possible configuration file looks like:

.. code-block:: xml

   <config>
      <action>
           <plugin>Plugins.SomePluginFolder.myplugin</plugin>
	   <function>SomeFunction</function>
           <default_level>1</default_level>
      </action>
   </config>

This code block could be saved in a file "myconfigfile.xml" and uploaded.
Optionally, the following tags can be specified within an action block:
   * filters - specify specific dicom tag (names) and values that should be used to filter the data before analysis
   * limits - specify limits for specific parameters to be determined
   * params - all tags in the params block will be passed on to the defined plugin and the information contained can be used by the plugin.
The filter block can be used to select specific instances from a dicom study that fit
the filter criteria:

.. code-block:: xml

   <filters>
      <tag name="SeriesDescription">SomeName</tag> 
      <tag name="0x008,0x1030">SomeDescription</tag> 
   </filters>

The limits block specify the limits for results obtained from the analysis.
For float values one can specify acceptable and critical higher and lower limits 
to be specified. In the case of character values a <criterium> tag needs to be specified:

.. code-block:: xml

   <limits>
      <result description="myFloatParameter">
          <acc_low>100</acc_low>
          <acc_high>500</acc_high>
          <crit_low>0</crit_low>
          <crit_high>1000</crit_high>
      </result>
      <result description="myTagDescription">
          <criterium>SomeValue</criterium>
      </result>
   </limits>

Finally, it is possible to pass along any xml tag block to a specified function through the <params> block:

.. code-block:: xml

   <params>
      <some_parameter SomeAttribute="Some attribute text">This is some parameter!</some_parameter>
      <parent NumberOfKids="2">
          <child>This is child 1</child>
          <child>This is child 2</child>
      </parent>
   </params>

As a complete example, the pywad package comes with a simple test plugin and corresponding configuration file:

.. code:: xml 
   :linenos:

    <config>
      <action>
        <plugin>Plugin_development.TestPlugin.myplugin</plugin>
        <function>testFunction</function>
        <default_level>1</default_level>
        
        <filters>
            <tag name="SeriesDescription">Flat Field</tag> <!-- Typical format -->
            <tag name="0x008,0x1030">Weekly QC</tag> <!-- Test DICOM hexadecimal tuple -->
            <tag name="ExposureTime">650</tag> <!-- Test dicom.valuerep.IS -->
            <tag name="HalfValueLayer">0.351</tag> <!-- Test dicom.valuerep.DSfloat -->
            <tag name="Rows">4096</tag> <!-- Test integer value -->
        </filters>
       

    
        <limits>
            <result description="Study date">
                <acc_low>100</acc_low>
                <acc_high>500</acc_high>
                <crit_low>0</crit_low>
                <crit_high>1000</crit_high>
            </result>
            <result description="StudyDescription">
                <criterium>Weekly QC</criterium>
            </result>
        </limits>
    </action>
    
    <action>
        <plugin>Plugin_development.TestPlugin.myplugin</plugin>
        <function>anotherFunction</function>
        
        <limits>
            <result description="Some bool">
                 <criterium>1</criterium>
             </result>
        </limits>

       <params>
            <some_parameter SomeAttribute="Some attribute text">This is some parameter!</some_parameter>
            <parent NumberOfKids="2">
                <child>This is child 1</child>
                <child>This is child 2</child>
            </parent>
        </params>
  
    </action>
    </config>


Testing plugins
---------------

To test a plugin you need to supply a relevant data set and have a configuration file
for that plugin. The script PluginTester.py in the Tools folder can be used to 
run automated tests of the plugins in the package. The script can be run by 
executing the command:

``python PluginTester.py``

If no arguments are specified the script will run a test for each config file specified in the Testing folder. 
The directory structure of the Testing directory is identical to the Plugin folder. 
The only difference is that the configuration xml file itself has to be placed inside a folder named "study", "series", or 
"instance" to define the level the data needs to be processed at. The data that is needed
to run the test has to be placed in a folder tree that has the same name as the plugin folder
tree.

Additionally, a custom .ini file can be specified in which only specific plugins are specified.
This can be done by invoking the command:

``python PluginTester.py myconfig.ini``

The PluginTester script checks if the pywad package can succesfully process the data and 
writes the resulting result.xml file into the TestingOutput folder. 


Contents
========

.. toctree::
     :caption: Table of Contents
     :numbered: 1
     :maxdepth: 6
   pywad2

Credits
=======

.. include:: ../CREDITS.txt

Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

