import os


class PluginResults(object):
    """Object to add and store results generated by the plugins.

    Results are added using the public class methods:
        addBool, addFloat, addChar and addObject

    For each of these methods, the arguments are:
        description, value, level=None, quantity='', units=''

        `description` and `value` are required. `level`, `quantity` and `units`
        are optional arguments. If `level` is not specified, the default level
        for the plugin's action is used.

    The SingleResult objects are retrieved by iterating over this object.
    """
    def __init__(self, default_level):
        """Instantiate self._results list: stores the SingleResult objects.
        """
        self._results = []
        self._default_level = default_level

    def __iter__(self):
        """Return an iterator over the self._results list."""
        return iter(self._results)
    
    def __len__(self):
        return len(self._results)

    def addBool(self, description, value, level=None, quantity='', units=''):
        """Add '0' or '1' to results depending on `value` (bool).
        Raise exception if `value` is not of type 'bool'.
        """
        if not isinstance(value, bool):
            error = "({}) expected type 'bool', received {}".format(
                description, type(value))
            raise TypeError(error)

        value_str = '1' if value else '0'
        self._addResult('boolean', description, value_str, level, quantity, units)

    def addFloat(self, description, value, level=None, quantity='', units=''):
        """Add string representation of `value` (float) to results.
        Raise exception if `value` can not be cast to float.
        """
        value_str = str(float(value))  # Test if value represents a number
        self._addResult('float', description, value_str, level, quantity, units)

    def addChar(self, description, value, level=None, quantity='', units=''):
        """Add `value` (str) to results.
        Raise exception if `value` is longer than 128 (limited by WAD MySQL)
        """
        value = value.encode("ascii", "xmlcharrefreplace").decode('ascii')
        if len(value) > 128:
            error = "({}) longer than 128 chars: {}".format(description, value)
            raise ValueError(error)
        self._addResult('char', description, value, level, quantity, units)

    def addObject(self, description, value, level=None, quantity='', units=''):
        """Add `value` (str) to results if it represents an accessible filepath.
        Raise exception if the file cannot be accessed.
        """
        path = os.path.abspath(value)
        open(path).close()  # Test if file can be accessed
        self._addResult('object', description, path, level, quantity, units)

    def _getLevel(self, level):
        """Return `level` if it is specified, otherwise return the
        default level for this plugin action (self._default_level).
        Raise exception is `level` is not an integer or None (unspecified).
        """
        if level is None:
            if self._default_level is None:
                raise ValueError("`level` not specified.")
            level = self._default_level

        try:
            return int(level)
        except:
            error = "`level` must be an integer, received {} {}"
            raise ValueError(error.format(type(level), level))

    def _addResult(self, category, description, value, level, quantity, units):
        """Instantiate a SingleResult object and append to self._results list.
        """
        level = self._getLevel(level)
        self._results.append(
            SingleResult(category, description, value, level, quantity, units))


class SingleResult(object):
    """Object to store a single plugin result."""
    resultCounter = 0

    def __init__(self, category, description, value, level, quantity, units):
        """Store result. `resultCounter` is incremented to keep track of the
        order in which SingleResult objects are stored amongst PluginResults
        objects (one PluginResults object is created for each action as
        specified in the config XML.
        """
        SingleResult.resultCounter += 1

        self.id = SingleResult.resultCounter
        self.category = category
        self.value = value
        self.description = description
        self.quantity = quantity
        self.units = units
        self.level = level

    def __repr__(self):
        """Return a human-readable string"""
        return '{}: {}'.format(self.description, self.value)
